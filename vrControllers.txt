CONTROLLERS

ADMIN CONTROLLER

package com.FinalProject.Controllers;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.FinalProject.Entity.Accounts;
import com.FinalProject.Entity.Foodie;
import com.FinalProject.Entity.Reviews;
import com.FinalProject.Entity.Vendor;
import com.FinalProject.Entity.VendorRatings;
import com.FinalProject.RepoImpl.AdminRepoImpl;
import com.FinalProject.RepoImpl.VendorReviewRepoImpl;
import com.FinalProject.excel.UserExcelExporter;

@Controller
public class AdminController {
	
	@Autowired
	AdminRepoImpl ai;
	
	@Autowired
	VendorReviewRepoImpl vrr;
	
	@GetMapping("adminhome")
	public String showHome(Model m)
	{
		return "Admin/HomePage";
	}
	
	@GetMapping("vendrs")
	public String logIn(Model m) 
	{
		List<Vendor> vendrqAll=ai.showAllvendorreq();
		m.addAttribute("vendrqAll", vendrqAll);
		return "Admin/vendorreq";
	}
	
	@GetMapping("acceptvendor/{vendorid}")
	public String acceptVendor(@PathVariable String vendorid,Model m) 
	{
		String r=ai.approveVendorById(vendorid);
		if(r!=null) {
			m.addAttribute("msg",r);
			List<Vendor> vendrqAll=ai.showAllvendorreq();
			m.addAttribute("vendrqAll", vendrqAll);
			return "Admin/vendorreq";
		}
		else {
			m.addAttribute("msg", "failed");
			return "Admin/vendorreq";
		}	
	}
	
	@GetMapping("rejectvendor/{vendorid}")
	public String rejectVendor(@PathVariable String vendorid,Model m) 
	{
		String r=ai.rejectVendorById(vendorid);
		if(r!=null) {
			Accounts acc=ai.getAccountsObjectById(vendorid);
			acc.setPaidamount(0);
			String subsc=acc.getSubscription();
			if(subsc.equals("one")) {
				ai.transcatDebitAdmin(vendorid, 1000);
				ai.transcatCreditVendor(vendorid, 1000);
			}
			else if(subsc.equals("three")) {
				ai.transcatDebitAdmin(vendorid, 2000);
				ai.transcatCreditVendor(vendorid, 2000);
			}
			else if(subsc.equals("six")) {
				ai.transcatDebitAdmin(vendorid, 5000);
				ai.transcatCreditVendor(vendorid, 1000);
			}
			else if(subsc.equals("twelve")) {
				ai.transcatDebitAdmin(vendorid, 9000);
				ai.transcatCreditVendor(vendorid, 1000);
			}
			m.addAttribute("msg",r);
			List<Vendor> vendrqAll=ai.showAllvendorreq();
			m.addAttribute("vendrqAll", vendrqAll);
			return "Admin/vendorreq";
		}
		else {
			m.addAttribute("msg", "failed");
			return "Admin/vendorreq";
		}	
	}
	
	@GetMapping("showv")
	public String viewVendor(Model m)
	{
		List<Vendor>vlist=ai.showAllApprovedVendor();
		m.addAttribute("vlist", vlist);
		return "Admin/viewvendor";
	}

	@GetMapping("activate/{vendorid}")
	public String activateVendor(@PathVariable String vendorid,Model m)
	{
		Vendor v=ai.searchVendorById(vendorid);
		if(v.getActivestatus().equals("activated")) {
			m.addAttribute("msg", "Alraedy activated");
			return "Admin/viewvendor";
		}
		else {
			String r=ai.activateVendorById(vendorid);
			if(r!=null) {
				m.addAttribute("msg",r);
				List<Vendor> vlist=ai.showAllApprovedVendor();
				m.addAttribute("vlist", vlist);
				return "Admin/viewvendor";
			}
			else {
				m.addAttribute("msg", "failed activation");
				return "Admin/viewvendor";
			}
		}
	}



	@GetMapping("deactivate/{vendorid}")
	public String deactivateVendor(@PathVariable String vendorid,Model m)
	{
		Vendor v=ai.searchVendorById(vendorid);
		if(v.getActivestatus().equals("deactivated")) {
		m.addAttribute("msg", "Already deactivated");
		return "Admin/viewvendor";
	}
	else {
		String r=ai.deactivateVendorById(vendorid);
		if(r!=null) {
			m.addAttribute("msg",r);
			List<Vendor> vlist=ai.showAllApprovedVendor();
			m.addAttribute("vlist", vlist);
			return "Admin/viewvendor";
		}
		else {
			m.addAttribute("msg", "failed deactivation");
			return "Admin/viewvendor";
			}
		}
	}
	
	@GetMapping("delete/{vendorid}")
	public String deletevendor(@PathVariable String vendorid,Model m)
	{
		String st=ai.searchVendorById(vendorid).getActivestatus();
		if(st.equals("activated")) {
			m.addAttribute("msg", "Cannot delete active vendor");
			return "Admin/viewvendor";
		}
		else if(st.equals("deactivated")) {
			String r = ai.deleteVendorById(vendorid);
			if(r!=null) {
				m.addAttribute("msg",r);
				List<Vendor> vlist=ai.showAllApprovedVendor();
				m.addAttribute("vlist", vlist);
				return "Admin/viewvendor";
			}
			else {
				m.addAttribute("msg", "failed");
				return "Admin/viewvendor";
			}
		}
		return null;
	}
	
	@GetMapping("showf")
	public String getFoodieList(Model m)
	{
		List<Foodie> flist = ai.showAllfoodie();
		m.addAttribute("flist", flist);
		return "Admin/viewFoodies";
	}
	
	@GetMapping("showreviews")
	public String showReviews(Model m)
	{
		List<Reviews> rlist = ai.showAllReview();
		m.addAttribute("rlist", rlist);
		return "Admin/viewReviews";
	}
	
	@GetMapping("showcomplaints")
	public String showComplaintReviews(Model m)
	{
		List<Reviews> rclist = ai.showReviewComplaints();
		m.addAttribute("rclist", rclist);
		return "Admin/viewComplaint";
	}
	
	@GetMapping("/deletereview/{vid}/{fid}/{complaint}")
	public String deleteReview(@PathVariable String vid,@PathVariable String fid,
			@PathVariable String complaint,Model m)
	{
		System.out.println("vid is"+vid);
		System.out.println("fid is"+fid);
		System.out.println("compl is"+complaint);
		String r=ai.deleteReview(vid, fid, complaint);
		if(r!=null) {
			m.addAttribute("msg",r);
			List<Reviews> rcAll=ai.showReviewComplaints();
			m.addAttribute("rcAll", rcAll);
			return "Admin/viewComplaint";
		}
		else {
			List<Reviews> rcAll=ai.showReviewComplaints();
			m.addAttribute("rcAll", rcAll);
			m.addAttribute("msg", "failed deactivation");
			return "Admin/viewComplaint";
		}
	}
	
	@GetMapping("greport")
	public String generateReport(Model m)
	{
		return "Admin/GenReport";
	}
	
	@GetMapping("downloadxl")
	public String exportToExcel(HttpServletResponse response) throws IOException
	{
		response.setContentType("application/octet-stream");
		String headerkey="Content-Disposition";
		String headerValue="attachement; filename=ratings.xlsx";
		
		response.setHeader(headerkey, headerValue);
		
		List<VendorRatings> vrlist=vrr.getRatingList();
		
		UserExcelExporter ob=new UserExcelExporter(vrlist);
		ob.export(response);
		
		return "Admin/GenReport";
	}
	
	
	
	
}



==============================================================

Foodie Controller

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.FinalProject.Entity.Foodie;
import com.FinalProject.Entity.Reviews;
import com.FinalProject.Entity.Vendor;
import com.FinalProject.RepoImpl.FoodieRepoImpl;

@Controller
public class FoodieController {
	
	@Autowired
	FoodieRepoImpl fr;
	
	@GetMapping("fhome")
	public String foodieHome(Model m)
	{
		String fid=fr.getFoodieId();
		Foodie f=fr.getFoodieById(fid);
		m.addAttribute("f",f);
		return "Foodie/foodiehome";
	}
	
	@GetMapping("freview")
	public String foodieReview(Model m)
	{
		List<Vendor> venderacAll=fr.showActivatedVendor();
		m.addAttribute("venderacAll",venderacAll);
		Foodie f=fr.getFoodieById(fr.getFoodieId());
		m.addAttribute("f",f);
		return "Foodie/foodiereview";
	}
	
	@GetMapping("vendshow/{vendorname}")
	public String activateVendor(@PathVariable String vendorname,Model m)
	{
		Vendor v=fr.getVendorByName(vendorname);
		if(v!=null) {
			/*m.addAttribute("msg",r);
			List<vendor> vlist=ai.showAllApprovedvendor();*/
			m.addAttribute("v", v);
			return "Foodie/showvendor";
		}
		else {
			m.addAttribute("msg", "null vendor");
			return "Foodie/foodiereview";
		}
	}
	
	@PostMapping("/addreview/{vendorid}/{vendorname}/{location}")
	public String addNewReview(@PathVariable String vendorid,@PathVariable String vendorname,
			@PathVariable String location,
			
			@RequestParam String review,
			@RequestParam String visitdate,
			@RequestParam String ratings,
			@RequestParam String reviewdate,Model m)
	{
		Reviews r=new Reviews();
		r.setVendorid(vendorid);
		r.setVendorname(vendorname);
		r.setLocation(location);
		r.setFoodieid(fr.getFoodieId());
		r.setDateofvisit(visitdate);
		r.setDateofreview(reviewdate);
		r.setReview(review);
		r.setRatings(ratings);
		//r.setComplaint(complaints);
		String st=fr.addReview(r);
		m.addAttribute("msg",st);
		return "Foodie/foodiereview";
	}
	
	@GetMapping("viewfreview")
	public String viewFoodieReview(Model m)
	{
		String fid=fr.getFoodieId();
		List<Reviews> reviewfAll=fr.viewReview(fid);
		m.addAttribute("reviewfAll",reviewfAll);
		return "Foodie/viewfreview";
	}
	
	@GetMapping("deletereview/{vendorid}")
	public String deleteReview(@PathVariable String vendorid,Model m)
	{
		String foodieid=fr.getFoodieId();
		String msg=fr.deleteReview(foodieid, vendorid);
		m.addAttribute("msg",msg);
		return "Foodie/viewfreview";
	}
	
	@GetMapping("editreview/{vendorid}")
	public String editReview(@PathVariable String vendorid,Model m)
	{
		String foodieid=fr.getFoodieId();
		//System.out.println("vendor id is "+vendorid);
		Reviews r=fr.getReviewByIds(foodieid ,vendorid);
		//Reviews r=fr.getReviewByReview(review);
		//System.out.println("review is "+r.getReview());
		//System.out.println("review is "+r.getReview());
		m.addAttribute("r",r);
		return "Foodie/edit";
	}
	
	/*@GetMapping("updatereview")
	public String updategetReview(@RequestParam String vendorid,@RequestParam String review,Model m)
	{
		String foodieid=fr.getFoodieId();
		System.out.println("review in up ids "+review);
		String msg=fr.updateReview( foodieid,vendorid, review);
		m.addAttribute("msg",msg);
		return "Foodie/editfreview";
	}*/
	
	@PostMapping("updatereview")
	@ResponseStatus(value=HttpStatus.OK)
	public @ResponseBody String updateReview(@RequestParam String vid,@RequestParam String submitreview,Model m)
	{
		String foodieid=fr.getFoodieId();
		System.out.println("vendor ids "+vid);
		System.out.println("review in up ids "+submitreview);
		String msg=fr.updateReview( foodieid,vid, submitreview);
		m.addAttribute("msg",msg);
		return "Foodie/edit";
	}

	
	/*@PostMapping("updatereview/{vendorid}")
	public String updateReview(@PathVariable String vendorid,@RequestParam String review,Model m)
	{
		String foodieid=fr.getFoodieId();
		System.out.println("review in up ids "+review);
		String msg=fr.updateReview( foodieid,vendorid, review);
		m.addAttribute("msg",msg);
		return "Foodie/editfreview";
	}*/
	
	@GetMapping("vsearch")
	public String searchDeatils(Model m)
	{
		return "Foodie/searchDetails";
	}
	
	@PostMapping("searchd")
	public String viewsearchDetails(@RequestParam String search,@RequestParam String parameter,Model m)
	{
		if(search.equals("name")) {
			List<Vendor> vlist=fr.getVendorsByName(parameter);
			m.addAttribute("vlist",vlist);
			return "Foodie/seeDetails";
		}
		else if(search.equals("location")) {
			List<Vendor> vlist=fr.getVendorByLocation(parameter);
			m.addAttribute("vlist",vlist);
			return "Foodie/seeDetails";
		}
		else if(search.equals("rating")) {
			List<Vendor> vlist=fr.getVendorByRating(parameter);
			m.addAttribute("vlist",vlist);
			return "Foodie/seeDetails";
		}
		else
			m.addAttribute("msg","details not available");
			return "Foodie/searchDetails";
	}
	
	@GetMapping("viewfprofile")
	public String viewProfile(Model m)
	{
		String fid=fr.getFoodieId();
		Foodie f=fr.getFoodieById(fid);
		m.addAttribute("f",f);
		return "Foodie/viewFoodieProf";
	}
	
	@GetMapping("editprofile")
	public String editProfile(Model m)
	{
		String fid=fr.getFoodieId();
		Foodie f=fr.getFoodieById(fid);
		m.addAttribute("f",f);
		return "Foodie/editFoodieProf";
	}
	
	@PostMapping("updatefprofile")
	public String updateProfile(@RequestParam String firstname,@RequestParam String lastname,@RequestParam String pass,@RequestParam String email,@RequestParam String dob,
			@RequestParam String gender,@RequestParam String address,@RequestParam String mobile,Model m)
	{
		String fid=fr.getFoodieId();
		Foodie f=fr.getFoodieById(fid);
		f.setFirstname(firstname);
		f.setLastname(lastname);
		f.setPassword(pass);
		f.setConfirmpassword(pass);
		f.setEmailid(email);
		f.setDob(dob);
		f.setGender(gender);
		f.setAddress(address);
		f.setMobile(mobile);
		String msg=fr.updateProfile(f);
		m.addAttribute("msg", msg);
		return "Foodie/editFoodieProf";
	}

}



=========================================================================================

Login Contoller

import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Paths;
import java.sql.Blob;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Base64;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletResponse;


import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.FinalProject.Entity.Accounts;
import com.FinalProject.Entity.Foodie;
import com.FinalProject.Entity.Reviews;
import com.FinalProject.Entity.UserDetails;
import com.FinalProject.Entity.Vendor;
import com.FinalProject.RepoImpl.AdminRepoImpl;
import com.FinalProject.RepoImpl.FoodieRepoImpl;
import com.FinalProject.RepoImpl.LoginRepoImpl;
import com.FinalProject.RepoImpl.VendorRepoImpl;

@Controller
public class LoginController {
	
	public static String uploadDirectory = System.getProperty("user.dir") + "/uploads";

	@Autowired
	LoginRepoImpl lr;
	
	@Autowired
	AdminRepoImpl ar;
	
	@Autowired
	FoodieRepoImpl fr;
	
	@Autowired
	VendorRepoImpl vr;
	
	@GetMapping("ab")
	public String loginpage()
	{
		return "Login/LoginPage";
	}
	
	@PostMapping("loginprocess")
	public String logIn(@RequestParam String txtuser,@RequestParam String txtpass,@RequestParam String usertype,Model m)
	{
		if(usertype.equals("Admin"))
		{
			boolean b=lr.validateAdmin(txtuser,txtpass);
			if(b) {
				return "Admin/HomePage";
			}
			else
				m.addAttribute("msg","Wrong username/password");
				return "Login/LoginPage";
			
		}
		else if(usertype.equals("Vendor"))
		{
			Vendor v = lr.validateVendor(txtuser, txtpass);
			if(v==null) {
				m.addAttribute("msg","Wrong username/password");
				return "Login/LoginPage";
			}
			else if((v.getReqstatus().equals("approved"))&& (v.getActivestatus().equals("activated")))
			{
				vr.setVendorid(v.getVendorid());
				m.addAttribute("v", v);
				return "vendor/vendorhome";
			}
			else if(v.getReqstatus().equals("pending"))
			{
				return "vendor/pending";
			}
			else if(v.getActivestatus().equals("deactivated"))
			{
				return "vendor/deactivatevendor";
			}
			else
				m.addAttribute("msg","Wrong username/password");
				return "Login/LoginPage";
		}
	
		else if(usertype.equals("Foodie"))
		{
			Foodie f = lr.validateFoodie(txtuser, txtpass);
			if (f!=null)
			{
				fr.setFoodieId(f.getFoodieid());
				m.addAttribute("f", f);
				return "Foodie/foodiehome";
			}
			else
				m.addAttribute("msg","Wrong username/password");
				return "Login/LoginPage";
		}
	
		else
			m.addAttribute("msg","Wrong username/password");
			return "Login/LoginPage";

	}

	
	@GetMapping("vendorReg")
	public String getvendorregpage()
	{
		return "Login/vendorRegi";
	}
	
	@GetMapping("foodieReg")
	public String getfoodieregpage()
	{
		return "Login/foodieRegi";
	}
	
	@PostMapping("addvendor")
	public String addNewVendor(@RequestParam String vendorname,@RequestParam String email,@RequestParam String websiteid,@RequestParam String location,@RequestParam String password,@RequestParam String vendortype,
			@RequestParam String cusinetype,@RequestParam MultipartFile uploadmenucard,@RequestParam MultipartFile uploadimage ,Model m) throws IOException
	{
		String name=vendorname;
		String mail=email;
		int n=0;
		List<String> vmailList=lr.getAllEmailsOfVendors();
		for(String e:vmailList) {
			if(mail.equals(e))
				n=1;
		}
		
		if(name.length()>=3 && name.length()<=50) {
			if((email.contains("@")) && n==0) {
				
					Vendor v = new Vendor();
					v.setVendorname(vendorname);
					v.setEmail(email);
					v.setWebsiteid(websiteid);
					v.setLocation(location);
					v.setPassword(password);
					v.setVendortype(vendortype);
					v.setCusinetype(cusinetype);
					byte[] bt = uploadimage.getBytes();
					byte[] bm=uploadmenucard.getBytes();
					v.setUploadphoto(bt);
					v.setUploadmenucard(bm);
					boolean r = lr.addVendor(v);
					m.addAttribute("msg",r);
					String vid=lr.getVendorId(vendorname);
					
					String transadd=lr.addToTransact(vid);
					m.addAttribute("vid", vid);
					return "Login/payment";
			}
			else {
				m.addAttribute("msg", "Check Email format or email avilablity");
				return "Login/vendorRegi";
			}
			
		}
		else {
			m.addAttribute("msg", "Name lenght should be 3-50");
			return "Login/vendorRegi";
		}
			
	}
	
	@PostMapping("sub")
	public String makePayment(@RequestParam String vendorid,@RequestParam String subsc,Model M) {
		Accounts ac=new Accounts();
		ac.setVendorid(vendorid);
		ac.setSubscription(subsc);
		if(subsc.equals("one")) {
			ac.setPaidamount(1000);
			String ms=lr.transcationAdmin(vendorid,1000);
			lr.transcationVendor(vendorid, 1000);
			M.addAttribute("ms",ms);
			
		}
		else if(subsc.equals("three")) {
			ac.setPaidamount(2000);
			String ms=lr.transcationAdmin(vendorid,2000);
			lr.transcationVendor(vendorid, 2000);
			M.addAttribute("ms",ms);
		}
		else if(subsc.equals("six")) {
			ac.setPaidamount(5000);
			String ms=lr.transcationAdmin(vendorid,5000);
			lr.transcationVendor(vendorid, 5000);
			M.addAttribute("ms",ms);
		}
		else if(subsc.equals("twelve")) {
			ac.setPaidamount(9000);
			String ms=lr.transcationAdmin(vendorid,9000);
			lr.transcationVendor(vendorid, 9000);
			M.addAttribute("ms",ms);
		}
		lr.makePayment(ac);
		
		M.addAttribute("msg","Succcesfull Payment");
		return "Login/payment";
		
	}
	
	@GetMapping("getVendorPhoto/{id}")
	public void getVendorPhoto(HttpServletResponse response, @PathVariable("id") int id) throws Exception {
		response.setContentType("image/jpeg");

		Blob ph = lr.getVendorPhotoById(id);

		byte[] bytes = ph.getBytes(1, (int) ph.length());
		InputStream inputStream = new ByteArrayInputStream(bytes);
		IOUtils.copy(inputStream, response.getOutputStream());
	}
	
	@GetMapping("getMenuPhoto/{id}")
	public void getMenuPhoto(HttpServletResponse response, @PathVariable("id") int id) throws Exception {
		response.setContentType("image/jpeg");

		Blob ph = lr.getMenuPhotoById(id);

		byte[] bytes = ph.getBytes(1, (int) ph.length());
		InputStream inputStream = new ByteArrayInputStream(bytes);
		IOUtils.copy(inputStream, response.getOutputStream());
	}
	
	@SuppressWarnings("deprecation")
	@PostMapping("addfoodie")
	public String addNewFoodie(@RequestParam String firstname,@RequestParam String lastname,@RequestParam String password,@RequestParam String confirmpassword,@RequestParam String emailid,@RequestParam String dob,
			@RequestParam String gender,@RequestParam String address,@RequestParam String mobile,Model m)
	{
		String fn=firstname;
		String ln=lastname;
		String mn=mobile;
		String ps=password;
		String cps=confirmpassword;
		String email=emailid;
		int n=0;
		List<String> fmailList=lr.getAllEmailsOfFoodies();
		
		for(String e:fmailList) {
			if(e.equals(email))
				n++;
		}
		int diff = 0;
		try {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Date convertedDate = sdf.parse(dob);
			//Date d1=new SimpleDateFormat("yyyy/MM/dd").parse(dob);
			convertedDate.getYear();
			if(convertedDate.getYear()<=103)
				diff=1;
			//System.out.println("year is "+convertedDate.getYear());
			//LocalDate d2=LocalDate.now();
			//System.out.println("birth date is "+d1);
			//ystem.out.println("current date is "+d2);
			//diff=d1.getYear()-d2.getYear();
			//System.out.println("dif is "+diff);
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		if(fn.length()<=15 && fn.length()>=3 && ln.length()<=15 && ln.length()>=3) {
			if(mn.matches("^\\d{10}$")) {
				if(ps.equals(cps)) {
					if(email.contains("@") || n==0) {
						if(diff==1) {
							Foodie f = new Foodie();
							f.setFirstname(firstname);
							f.setLastname(lastname);
							System.out.println("last name is"+lastname);
							f.setPassword(password);
							f.setConfirmpassword(confirmpassword);
							f.setEmailid(emailid);
							f.setDob(dob);
							f.setGender(gender);
							f.setAddress(address);
							f.setMobile(mobile);
							String r = lr.addFoodie(f);
							m.addAttribute("msg", r);
						}
						else {
							m.addAttribute("msg", "Age should greater than 18");
						}
						
					}
					else
						m.addAttribute("msg", "Check Email Format or email is not Availabele");
				}
				else {
					m.addAttribute("msg", "Password and Confirm Password Should be Same ");
				}	
			}
			else {
				m.addAttribute("msg", "Check the Phone Number ");
			}
		}
		else {
			m.addAttribute("msg", "Check the length of name ");
		}
		
		
		return "Login/foodieRegi";
		
	}
	
	@PostMapping("addfoodieuser")
	public String addFoodieDetails(@RequestParam String firstname,@RequestParam String lastname,@RequestParam String email,
			@RequestParam String sq1,@RequestParam String sq2,@RequestParam String sq3,Model m)
	{
		UserDetails ud=new UserDetails();
		ud.setFirstname(firstname);
		ud.setLastname(lastname);
		ud.setEmail(email);
		ud.setUsername("no");
		ud.setPassword("yes");
		ud.setSq1(sq1);
		ud.setSq2(sq2);
		ud.setSq3(sq3);
		String msg=lr.addUserDetails(ud);
		m.addAttribute("msg", msg);	
		return "Login/FoodieReg";
		
	}
	
	@GetMapping("viewReviewLogin")
	public String viewReview(Model m) {
		List<Reviews> rlist=ar.showAllReview();
		m.addAttribute("rlist", rlist);
		return "Login/viewReviewsLog";
	}
	
	@GetMapping("search")
	public String searchDeatil(Model m)
	{
		return "Login/searchDetails";
	}
	
	@GetMapping("forgotuserid")
	public String forgorUserID(Model m)
	{
		return "Login/RestoreUserid";
	}
	
	@PostMapping("restoreusernamem")
	public String restireUserId(@RequestParam String usertype,@RequestParam String name,@RequestParam String email,
			@RequestParam String sq1,@RequestParam String sq2,Model m)
	{
		String usid;
		if(sq1.equals("12345")  && sq2.equals("98765")) {
			
			try {
				if(usertype.equals("Vendor")) {
					Vendor v=lr.getUernameVendor(name, email);
					usid=v.getVendorid();
				}
				else {
					Foodie f=lr.getUernameFoodie(name, email);
					usid=f.getFoodieid();
				}
				m.addAttribute("msg", "Your user id is "+usid);	
			}
			catch(Exception e) {
				m.addAttribute("msg", "Wrong inputs");
			}		
		}
		else
			m.addAttribute("msg", "Wrong answers");
		
		return "Login/RestoreUserid";
	}
	
	@GetMapping("forgotpassword")
	public String forgorPassword(Model m)
	{
		return "Login/RestorePassw";
	}
	
	
	@PostMapping("restorepassword")
	public String restorePassword(@RequestParam String usertype,@RequestParam String name,@RequestParam String email,
			@RequestParam String id,@RequestParam String sq1,@RequestParam String sq2,Model m)
	{
		String pass=null;
		if(sq1.equals("12345")  && sq2.equals("98765")) {
			
			try {
				if(usertype.equals("Vendor")) {
					Vendor v=lr.getUernameVendor(name, email);
				
					pass=v.getPassword();
				}
				else if(usertype.equals("Foodie")){
					Foodie f=lr.getUernameFoodie(name, email);
				
					pass=f.getPassword();
				}
				m.addAttribute("msg", "Your password is "+pass);
			}catch(Exception e) {
				m.addAttribute("msg", "Wrong inputs");
			}
			
				
			
		}
		else
			m.addAttribute("msg", "Wrong answers");
	
		return "Login/RestorePassw";
	}
	
}
	



======================================================================================


Vendor Controller


@Controller
public class VendorController {

	@Autowired
	VendorRepoImpl vr;
	@Autowired
	FoodieRepoImpl fr;
	
	@GetMapping("vhome")
	public String vendorHome(Model m)
	{
		String vid=vr.getVendorid();
		Vendor v=vr.getVendorById(vid);
		m.addAttribute("v",v);
		return "vendor/vendorhome";
	}
	
	@GetMapping("vreview")
	public String vendorReview(Model m)
	{
		String vid=vr.getVendorid();
		//List<Reviews> reviewVAll=vr.viewReview(vid);
		List<FoodieReviews> reviewVAll=vr.getFoodieDetails(vid);
		m.addAttribute("reviewVAll",reviewVAll);
		Vendor v=vr.getVendorById(vid);
		m.addAttribute("v",v);
		return "vendor/viewvreview";
	}
	
	@PostMapping("raisecomp")
	public String raiseComplaint(@RequestParam String fid,
	Model m)
	{
		String vid=vr.getVendorid();
		//m.addAttribute("review",review);
		m.addAttribute("fid",fid);
		m.addAttribute("vid",vid);
		return "vendor/raisecompl";
	}
	
	@PostMapping("submitcompl/{foodieid}")
	public String submitComplaint(@RequestParam String submitcomp,
	@PathVariable String foodieid,Model m)
	{
		String vid=vr.getVendorid();
		String fid=foodieid;
		
		Reviews rw=fr.getReviewByIds(fid, vid);
		String review=rw.getReview();
		System.out.println("review is"+rw.getReview());
		System.out.println("complaint is "+submitcomp);
		String msg=vr.updateComplaint(submitcomp,review);
		System.out.println("compl is"+msg);
		m.addAttribute("msg",msg);
		return "vendor/raisecompl";
	}
	
	@GetMapping("viewvprofile")
	public String viewProfile(Model m)
	{
		String vid=vr.getVendorid();
		Vendor v=vr.getVendorById(vid);
		m.addAttribute("v",v);
		return "vendor/viewVendorProf";
	}
	
	@GetMapping("editvprofile")
	public String editProfile(Model m)
	{
		String vid=vr.getVendorid();
		Vendor v=vr.getVendorById(vid);
		m.addAttribute("v",v);
		return "vendor/editVendorProf";
	}
	
	@PostMapping("updatevprofile")
	public String updateProfile(@RequestParam String vendorname,@RequestParam String email,@RequestParam String location,@RequestParam String websiteid,@RequestParam String pass,
			@RequestParam String vendortype,@RequestParam String cusinetype,@RequestParam String uploadmenucard,@RequestParam String uploadphoto,Model m)
	{
		String vid=vr.getVendorid();
		Vendor v=vr.getVendorById(vid);
		v.setVendorname(vendorname);
		v.setEmail(email);
		v.setLocation(location);
		v.setWebsiteid(websiteid);
		v.setPassword(pass);
		v.setVendortype(vendortype);
		v.setCusinetype(cusinetype);
		/*v.setUploadmenucard(uploadmenucard);
		v.setUploadphoto(uploadphoto);*/
		String msg=vr.updateVendorProfile(v);
		m.addAttribute("msg", msg);
		return "vendor/editVendorProf";
	}
}

